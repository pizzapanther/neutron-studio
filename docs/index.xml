<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Neutron Studio</title>
    <link>/</link>
    <description>Recent content on Neutron Studio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 09 Mar 2024 06:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing PubCrank.com</title>
      <link>/posts/2024-03-09-introducing-pubcrank/</link>
      <pubDate>Sat, 09 Mar 2024 06:00:00 +0000</pubDate>
      
      <guid>/posts/2024-03-09-introducing-pubcrank/</guid>
      <description>Today I&amp;rsquo;m officially releasing PubCrank.com! PubCrank is CMS for static site generators that use Markdown to generate content. It lets a developer setup a static site with guards that can guide content creators and editors to develop content independently. It does this with a simple editor that is configurable with templates that define the fields which can be used for that particular type of content. See the screenshot of the editor below.</description>
      <content>&lt;p&gt;Today I&amp;rsquo;m officially releasing &lt;a href=&#34;https://www.pubcrank.com/&#34;&gt;PubCrank.com&lt;/a&gt;! PubCrank is CMS for static site generators that use Markdown to generate content. It lets a developer setup a static site with guards that can guide content creators and editors to develop content independently. It does this with a simple editor that is configurable with templates that define the fields which can be used for that particular type of content. See the screenshot of the editor below.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;PubCrank Screenshot&#34; src=&#34;/img/pubcrank-editor.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;why-another-cms&#34;&gt;Why Another CMS?&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve developed various Content Management Systems over the years, most notably, I was a founding engineer of &lt;a href=&#34;https://culturemap.com/&#34;&gt;CultureMap.com&lt;/a&gt;. And for the most part these systems all work the same. They present various form fields which need to be filled in and usually have one big field for free-form content. It is then up to the developer to define these fields and take them to fill in an HTML template which is shown to visitors of your site.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also found over the years, that for most smaller organizations unless you have dedicated editors or writers, everyone says they want to help edit content, but usually it is left up to the developer. So instead of setting up a hard to maintain CMS, I have started to use static site generators like &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; with Markdown. This setup follows the same model as other CMS&amp;rsquo;s with fields defined in the frontmatter and content as Markdown in the main body of the file.&lt;/p&gt;
&lt;p&gt;However, every once in a while, I get lucky and someone wants to help develop content. They are essentially locked out of helping without a CMS. Thus, the CMS for static sites was born. I&amp;rsquo;ve found a few existing static site CMS tools but was not satisfied with the workflow and experience. So I developed &lt;a href=&#34;https://www.pubcrank.com/&#34;&gt;PubCrank.com&lt;/a&gt; to fill this gap.&lt;/p&gt;
&lt;h2 id=&#34;free-for-local-editing&#34;&gt;Free for Local Editing&lt;/h2&gt;
&lt;p&gt;I wanted to build and deploy PubCrank as fast as possible with the most bare bones feature set so that I could start using it with several small sites that I maintain. Additionally, I would like to make some revenue selling it as a SaaS. By using the &lt;a href=&#34;https://developer.chrome.com/docs/capabilities/web-apis/file-system-access&#34;&gt;Native File System API&lt;/a&gt; I was able to build the PubCrank Editor with only frontend technology and without the need for building something like an Electron app. So today&amp;rsquo;s launch is that initial release.&lt;/p&gt;
&lt;p&gt;You can edit sites with PubCrank locally right in your browser. This will let you setup guards for your writers but still means they will probably need to use something like Git when they are done developing content. However, this is a great way for you to start setting up and using PubCrank as a developer.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve decided to keep this local editing free forever as an on ramp for using PubCrank. If you&amp;rsquo;re a developer and only ever need a nice editor experience than today&amp;rsquo;s release is all you&amp;rsquo;ll ever need.&lt;/p&gt;
&lt;h2 id=&#34;future-in-the-cloud&#34;&gt;Future in the Cloud&lt;/h2&gt;
&lt;p&gt;If, however, you would like an even easier experience for your writers, I plan to add future integrations with Github, Gitlab, etc. This will allow you to provide an editing experience without the need for use of Git locally. PubCrank will handle all the commits and pushes for your users.&lt;/p&gt;
&lt;p&gt;This is where I plan to charge for the PubCrank service since this will mean maintaining backend services unlike today&amp;rsquo;s launch which is simply a frontend static file deployment.&lt;/p&gt;
&lt;p&gt;So try PubCrank today, to start cranking out your content! In case you missed the screenshot, this post was written with PubCrank.&lt;/p&gt;
&lt;iframe src=&#34;https://giphy.com/embed/v2xIous7mnEYg&#34; width=&#34;480&#34; height=&#34;349&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;https://giphy.com/gifs/newspaper-press-v2xIous7mnEYg&#34;&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pubcrank-links&#34;&gt;PubCrank Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Try PubCrank today: &lt;a href=&#34;https://www.pubcrank.com/&#34;&gt;https://www.pubcrank.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pizzapanther/pubcrank-community/discussions&#34;&gt;Discuss Features and Ideas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pizzapanther/pubcrank-community/issues&#34;&gt;Report Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>A Better Template for Your Frontend on Fly.io</title>
      <link>/posts/2024-03-05-static-sites-on-fly/</link>
      <pubDate>Sun, 04 Feb 2024 06:00:00 +0000</pubDate>
      
      <guid>/posts/2024-03-05-static-sites-on-fly/</guid>
      <description>While the Fly docs have a good example of serving a static frontend, it leaves many details out and misses some features you will probably want if you&amp;rsquo;re deploying anything with a little complexity. This post goes over how you can improve this setup and make it a better developer experience using Fly.io for static frontends.
Better Web Server While the web server documented is fast and simple, it hasn&amp;rsquo;t been updated in ages and is missing some configuration options you will probably want.</description>
      <content>&lt;p&gt;While the &lt;a href=&#34;https://fly.io/docs/languages-and-frameworks/static/&#34;&gt;Fly docs&lt;/a&gt; have a good example of serving a static frontend, it leaves many details out and misses some features you will probably want if you&amp;rsquo;re deploying anything with a little complexity. This post goes over how you can improve this setup and make it a better developer experience using Fly.io for static frontends.&lt;/p&gt;
&lt;h2 id=&#34;better-web-server&#34;&gt;Better Web Server&lt;/h2&gt;
&lt;p&gt;While the web server documented is fast and simple, it hasn&amp;rsquo;t been updated in ages and is missing some configuration options you will probably want. I found the &lt;a href=&#34;https://static-web-server.net/&#34;&gt;Static Web Server&lt;/a&gt; that is written in Rust to be fast and simple, but additionally is being actively developed and contains more configuration features you will probably need. My example config is shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;general&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/app/src/dist&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;page-fallback&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/app/src/dist/index.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;log-level&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cache-control-headers&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;advanced&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[[&lt;span style=&#34;color:#a6e22e&#34;&gt;advanced&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;advanced&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cache-Control&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;public, max-age=1800&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[[&lt;span style=&#34;color:#a6e22e&#34;&gt;advanced&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;advanced&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cache-Control&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;public, max-age=1800&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[[&lt;span style=&#34;color:#a6e22e&#34;&gt;advanced&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.{jpg,jpeg,png,ico,gif,woff2,js,webmanifest,xml,css}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;advanced&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cache-Control&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;public, max-age=86400&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first thing you&amp;rsquo;ll notice is the &lt;code&gt;page-fallback&lt;/code&gt; setting. This setting is useful if you&amp;rsquo;re building a Single Page Application (SPA) with URL routes. While the goStatic server can also do this by serving a 404 page, this is incorrect because the browser receives a 404 status code which some browsers interpret as an error thus disrupting what is presented back to the user. Static Web Server properly handles the fallback and presents a 200 status code.&lt;/p&gt;
&lt;h3 id=&#34;http-headers&#34;&gt;HTTP Headers&lt;/h3&gt;
&lt;p&gt;Next you&amp;rsquo;ll notice you can control the HTTP headers with Static Web Server which you can not do so well with goStatic. In my example this allows me to set cache headers for my HTML routes to a shorter time since they are not unique per version deploy. For all other files which have unique compiled names by my bundler I set higher cache times so my server can cut down on bandwidth.&lt;/p&gt;
&lt;h2 id=&#34;build-process&#34;&gt;Build Process&lt;/h2&gt;
&lt;p&gt;The Fly example also does not show an example build process so I built out an example build process below. If you have a static frontend with some kind of compilation step, you probably want Fly.io to run the build for you, so that you have better repeatable builds. Below is an example &lt;code&gt;Dockerfile&lt;/code&gt; I use on one of my projects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; docker.io/bitnami/minideb:bookworm&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;USER&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; root&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ARG&lt;/span&gt; VERSION&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mkdir -p /app&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /app&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; install_packages bash curl ca-certificates &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    curl -fsSL https://deb.nodesource.com/setup_20.x | bash - &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; install_packages nodejs&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; . /app&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; bin/static-web-server /usr/bin&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt; VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$VERSION&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; sed -i -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/dev/&lt;/span&gt;$VERSION&lt;span style=&#34;color:#e6db74&#34;&gt;/g&amp;#34;&lt;/span&gt; src/version.js&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; npm install&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; npm run build&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CMD&lt;/span&gt; static-web-server --config-file /app/config.toml&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A couple things to note in this build:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I like using the &lt;code&gt;minideb&lt;/code&gt; container to start from since it is a compact Debian distro that allows you to easily install Linux packages you might need. In this case we install Node 20 LTS.&lt;/li&gt;
&lt;li&gt;When running the build, you must supply a version build arg like: &lt;code&gt;fly deploy --build-arg VERSION=v1.0.1&lt;/code&gt;. You could skip this but I wanted to include a version number in my frontend build. This method of using a search and replace with &lt;code&gt;sed&lt;/code&gt; works best with Vite I found instead of using ENVs.&lt;/li&gt;
&lt;li&gt;You can see this build process is pretty standard otherwise with &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;npm run build&lt;/code&gt;. So you can adapt those commands to whatever bundler you are using.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;summing-it-up&#34;&gt;Summing It Up&lt;/h2&gt;
&lt;p&gt;By switching your static file server and adding a build pipeline on Fly.io you can improve your frontend deployment process and support extra features you might need.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Setting the Default Sound Source and Sink on Ubuntu</title>
      <link>/posts/2023-09-06-set-default-sound-ubuntu/</link>
      <pubDate>Wed, 06 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>/posts/2023-09-06-set-default-sound-ubuntu/</guid>
      <description>If you&amp;rsquo;re a modern office worker you probably do a lot of video calls and it&amp;rsquo;s really annoying when your default audio and video inputs and outputs change on rebooting your computer. Windows is actually pretty good at remembering your last choice and setting the appropriate defaults on reboot. However, Linux doesn&amp;rsquo;t do anything here, so you&amp;rsquo;re at the mercy of randomness unless you have a script to set the default for you.</description>
      <content>&lt;p&gt;If you&amp;rsquo;re a modern office worker you probably do a lot of video calls and it&amp;rsquo;s really annoying when your default audio and video inputs and outputs change on rebooting your computer. Windows is actually pretty good at remembering your last choice and setting the appropriate defaults on reboot. However, Linux doesn&amp;rsquo;t do anything here, so you&amp;rsquo;re at the mercy of randomness unless you have a script to set the default for you. Below is a script you can add to your startup applications which will set your default audio input and output for systems that use &lt;a href=&#34;https://www.freedesktop.org/wiki/Software/PulseAudio/&#34;&gt;PulseAudio&lt;/a&gt; like Ubuntu and Debian. It should work on other systems with PulseAudio as well.&lt;/p&gt;
&lt;p&gt;To use the script, modify lines 9-10 and lines 15-16 with your default audio source and sink. To find out what they might be named, use &lt;code&gt;pactl list short sinks&lt;/code&gt; and &lt;code&gt;pactl list short sources&lt;/code&gt;. Then craft a search string for the grep statement to check if they are available and also enter the full name for lines 15 and 16.&lt;/p&gt;


  
    &lt;pre class=&#34;language-bash line-numbers&#34;
      &gt;&lt;code class=&#34;language-bash&#34;
      &gt;#!/usr/bin/env bash

sleep 5

pactl=$(which pactl)
if [[ -x &amp;#34;$pactl&amp;#34; ]]
then
  # Modify lines below for SOURCE and SINK check
  SINK=`pactl list short sinks | grep SINK-STRING -c`
  SOURCE=`pactl list short sources | grep SOURCE-STRING -c`
  if [[ $SOURCE = 1 ]] &amp;amp;&amp;amp; [[ $SINK = 1 ]]
  then
    echo &amp;#34;Setting Audio Source and Sink&amp;#34;
    # Modify lines below for full SOURCE and SINK name
    pactl set-default-source FULL-SOURCE-STRING
    pactl set-default-sink FULL-SINK-STRING
  fi
fi
&lt;/code&gt;&lt;/pre&gt;
  


</content>
    </item>
    
    <item>
      <title>Installing Tmux plugins on Ubuntu</title>
      <link>/posts/2023-08-14-tmux-plugins-ubuntu/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>/posts/2023-08-14-tmux-plugins-ubuntu/</guid>
      <description>I learned about Tmux plugins this weekend and they are pretty awesome! However, I didn&amp;rsquo;t find the correct instructions for setting them up quickly in Ubuntu. Most of the directions I found centered around installing manaully from Github. Below I listed the instructions for Ubuntu/Debian installation.
See the list of plugins on Github.
Installation sudo apt install tmux-plugin-manager echo &amp;#34;run &amp;#39;/usr/share/tmux-plugin-manager/tpm&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.tmux.conf # exit and start tmux again Installing plugins Add new plugin to ~/.</description>
      <content>&lt;p&gt;I learned about Tmux plugins this weekend and they are pretty awesome! However, I didn&amp;rsquo;t find the correct instructions for setting them up quickly in Ubuntu. Most of the directions I found centered around installing manaully from Github. Below I listed the instructions for Ubuntu/Debian installation.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://github.com/tmux-plugins/list&#34;&gt;list of plugins on Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install tmux-plugin-manager

echo &amp;#34;run &amp;#39;/usr/share/tmux-plugin-manager/tpm&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.tmux.conf

# exit and start tmux again
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;installing-plugins&#34;&gt;Installing plugins&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Add new plugin to &lt;code&gt;~/.tmux.conf&lt;/code&gt; with &lt;code&gt;set -g @plugin &#39;...&#39;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;set -g @plugin &#39;tmux-plugins/tmux-yank&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;ctrl-b (or prefix)&lt;/code&gt; + &lt;kbd&gt;I&lt;/kbd&gt; (capital i, as in &lt;strong&gt;I&lt;/strong&gt;nstall) to fetch the plugin.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You&amp;rsquo;re good to go! The plugin was cloned to &lt;code&gt;~/.tmux/plugins/&lt;/code&gt; dir and sourced.&lt;/p&gt;
&lt;h3 id=&#34;uninstalling-plugins&#34;&gt;Uninstalling plugins&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Remove (or comment out) plugin from the list.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;prefix&lt;/code&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;u&lt;/kbd&gt; (lowercase u as in &lt;strong&gt;u&lt;/strong&gt;ninstall) to remove the plugin.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All the plugins are installed to &lt;code&gt;~/.tmux/plugins/&lt;/code&gt; so alternatively you can
find plugin directory there and remove it.&lt;/p&gt;
&lt;h3 id=&#34;more-docs&#34;&gt;More Docs&lt;/h3&gt;
&lt;p&gt;For more docs on plugins see &lt;a href=&#34;https://github.com/tmux-plugins/tpm&#34;&gt;TPM - Tmux Plugin Manager&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Using Vue 3 with Parcel JS</title>
      <link>/posts/2023-06-04-parcel-and-vue-is-love/</link>
      <pubDate>Sat, 03 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>/posts/2023-06-04-parcel-and-vue-is-love/</guid>
      <description>While all the buzz lately is around the Javascript build tool Vite especially in the Vue.js community, I still prefer Parcel for building my Vue.js applications. However, getting started with Vue.js and Parcel is a little tricky because most tutorials and docs focus around Vite or other more popular build tools. This article documents how to setup Parcel to build a Vue.js project. But first why would even want to use Parcel?</description>
      <content>&lt;p&gt;While all the buzz lately is around the Javascript build tool &lt;a href=&#34;https://vitejs.dev/&#34;&gt;Vite&lt;/a&gt; especially in the Vue.js community, I still prefer &lt;a href=&#34;https://parceljs.org/&#34;&gt;Parcel&lt;/a&gt; for building my Vue.js applications. However, getting started with Vue.js and Parcel is a little tricky because most tutorials and docs focus around Vite or other more popular build tools. This article documents how to setup Parcel to build a Vue.js project. But first why would even want to use Parcel?&lt;/p&gt;
&lt;h2 id=&#34;why-use-parcel&#34;&gt;Why Use Parcel?&lt;/h2&gt;
&lt;p&gt;While Vite works great and builds applications fast, it&amp;rsquo;s focus is on building things fast. That sounds great to a lot of people probably, for me that is an anti-pattern. Yes I want my devs tools to be fast, but if that is the primary focus, then often times the developer experience is often a secondary concern. Instead, I want developers tools that are primarily focused on developer experience and also fast. I think that Parcel delivers great on this promise. Most Javascript build tools like Vite end up being wrappers around existing tools but with the configuration obscured away and pre-configured for you. While this is great to get started fast, you eventually hit configuration roadblocks and complexity as your app grows. Parcel has a zero-configuration philosophy and is not a wrapper around older tools. Once you get past setting it up, you encounter far fewer configuration roadblocks as your app grows.&lt;/p&gt;
&lt;p&gt;The only downside with using Parcel especially with Vue, is that the setup is not documented as much as I would like. Additionally, with the release of Parcel 2 and Vue 3 there are a few quirks with the setup. Hopefully, they will get worked out in the future, but for now, the instructions below will show you how to setup a Vue app with Parcel.&lt;/p&gt;
&lt;h2 id=&#34;building-a-vue-3-app-with-parcel&#34;&gt;Building a Vue 3 App with Parcel&lt;/h2&gt;
&lt;p&gt;To get started, first you need a Vue 3 app. If you need to start one, the &lt;a href=&#34;https://parceljs.org/languages/vue/&#34;&gt;Parcel documentation&lt;/a&gt; is a good place to get a skeleton app to start with. If you use just those instructions though, you&amp;rsquo;ll probably get some errors or warnings we need to take of.&lt;/p&gt;
&lt;h3 id=&#34;fix-1-packagejson---vue-bundle&#34;&gt;Fix 1: package.json - Vue Bundle&lt;/h3&gt;
&lt;p&gt;In your &lt;code&gt;package.json&lt;/code&gt; you&amp;rsquo;ll want to add an alias section. This will let Parcel know the correct version of Vue to use when bundling your application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alias&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;vue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vue/dist/vue.esm-browser.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;special-note-for-production-builds&#34;&gt;Special Note for Production Builds&lt;/h4&gt;
&lt;p&gt;Right now there is &lt;a href=&#34;https://github.com/parcel-bundler/parcel/issues/7663&#34;&gt;a bug&lt;/a&gt; when you switch to production builds with Vue 3 and Parcel. So when you do a production build you need to switch the alias to &lt;code&gt;vue.esm-browser.prod.js&lt;/code&gt;. I just use a pre-build command in my CI/CD to switch that out for production builds: &lt;code&gt;sed -i &#39;s/vue.esm-browser.js/vue.esm-browser.prod.js/g&#39; package.json&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;fix-2-packagejson---build-type-may-be-needed&#34;&gt;Fix 2: package.json - Build type (may be needed)&lt;/h3&gt;
&lt;p&gt;Depending on your build target and your output context you may want to add &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;targets&lt;/code&gt; also to your &lt;code&gt;package.json&lt;/code&gt;. It doesn&amp;rsquo;t hurt to add them and to be explicit about what you&amp;rsquo;re building. I also like to use &lt;code&gt;targets&lt;/code&gt; often because I want Parcel to build multiple things.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;targets&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;myapp&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src/index.js&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;distDir&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dist&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;browser&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;outputFormat&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;global&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;fix-3-main-app-js---silence-more-warnings-and-include-vue-options-api&#34;&gt;Fix 3: Main App JS - Silence More Warnings and Include Vue Options API&lt;/h3&gt;
&lt;p&gt;In your you main app JS, you are probably getting additional warnings or you may want to include the Vue Options API. Put these variables in you initial app JS file to silence the dev tool warnings and explicitly setup the Vue Options API or not. You probably want to put them towards the top of the file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;__VUE_OPTIONS_API__&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NODE_ENV&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;production&amp;#39;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;__VUE_PROD_DEVTOOLS__&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;__VUE_PROD_DEVTOOLS__&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Have fun with your new Vue 3 app development and throw out your aspirin as you&amp;rsquo;ll now be on easy street and have far fewer configuration errors. Parcel JS will handle most other setup, even installing the transformers you&amp;rsquo;ll need to compile things like Vue Single File Components and Typescript.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Making GraphQL Queries in Python Like a Boss</title>
      <link>/posts/2023-01-31-graphql-in-python/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>/posts/2023-01-31-graphql-in-python/</guid>
      <description>GraphQL is a newer way to create APIs that are very flexible and give users more control over how they use your API. However, with this extra control in your hands, it puts more effort on your part on how to call the GraphQL API. Unlike a REST API which you call and then receive a response determined by the API developer, with a GraphQL API, you have to develop queries to pull out information that is important to you.</description>
      <content>&lt;p&gt;GraphQL is a newer way to create APIs that are very flexible and give users more control over how they use your API. However, with this extra control in your hands, it puts more effort on your part on how to call the GraphQL API. Unlike a REST API which you call and then receive a response determined by the API developer, with a GraphQL API, you have to develop queries to pull out information that is important to you. In Python there are several client libraries that can help you call GraphQL APIs more easily.&lt;/p&gt;
&lt;h2 id=&#34;graphql-clients&#34;&gt;GraphQL Clients&lt;/h2&gt;
&lt;p&gt;Python has a few GraphQL clients that work really well. While you can use a general HTTP call in Python or a general library like &lt;a href=&#34;https://www.python-httpx.org/&#34;&gt;HTTPX&lt;/a&gt; or &lt;a href=&#34;https://requests.readthedocs.io/en/latest/&#34;&gt;Requests&lt;/a&gt;, GraphQL specific clients make it much easier to generate queries, insert variables, and listen to subscriptions. Below are few libraries I found in the past the work well.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/graphql-python/gql&#34;&gt;GQL&lt;/a&gt; is a GraphQL client that includes the most features. So if you want a way to make GraphQL queries with all the bells and whistles this library for you.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/prodigyeducation/python-graphql-client&#34;&gt;Python GraphQL Client&lt;/a&gt; is smaller client that still has support for many GraphQL features. This library has fewer dependencies and is smaller and sometimes can be easier to install if you are having version conflicts with GQL.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;take-a-different-approach-sgqlc&#34;&gt;Take A Different Approach: SGQLC&lt;/h2&gt;
&lt;p&gt;While Python GraphQL libraries are great and help you to generate and make queries more easily, you still have to put in the effort to figure out which queries you want to make. This means exploring your GraphQL API and deciding which parameters you want and then creating a query to pull the information out you want. &lt;a href=&#34;https://github.com/profusion/sgqlc&#34;&gt;Simple GraphQL Client - SGQLC&lt;/a&gt; takes a different approach. SGQLC gives you tools to generate a Python library out of a GraphQL schema. Once you have your custom library built, you can use it to make GraphQL calls even easier. Below I&amp;rsquo;ll walk you through it&amp;rsquo;s usage.&lt;/p&gt;
&lt;h3 id=&#34;1-download-your-graphql-schema&#34;&gt;1. Download your GraphQL Schema&lt;/h3&gt;
&lt;p&gt;First download your GraphQL schema into a JSON dump.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python3 -m sgqlc.introspection https://myapp.com/graphql schema.json&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-create-a-custom-python-library&#34;&gt;2. Create a Custom Python Library&lt;/h3&gt;
&lt;p&gt;Now that you have a JSON schema you can convert it to a custom Python library.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sgqlc-codegen schema schema.json schema.py&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-use-your-custom-library-in-your-python-code&#34;&gt;3. Use Your Custom Library in Your Python Code&lt;/h3&gt;
&lt;p&gt;Now that you have a custom Python library, you can use Python without writing queries to call your GraphQL API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Selecting Default Fields&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This gets the first 100 issues from a selected repository on Github.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sgqlc.operation &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Operation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sgqlc.endpoint.requests &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; RequestsEndpoint
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; schema &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; schema
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Generate a Query&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Operation(schema&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Query)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;repository(owner&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;owner, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;issues(first&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Call the endpoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bearer TOKEN&amp;#39;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endpoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RequestsEndpoint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://server.com/graphql&amp;#34;&lt;/span&gt;, headers)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# data as a dictionary&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; endpoint(op)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# convert to Python objects&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;repo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (op &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; data)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;repository
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; issue &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;issues&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nodes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(issue)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The last step that converts the data to Python objects is optional. Sometimes going through large dictionaries of data can be difficult, so converting the data to Python objects can be extremely helpful.&lt;/p&gt;
&lt;p&gt;This example selects the default fields for &lt;code&gt;issues&lt;/code&gt;. This is all fields that are not relationships to other types. If you wish to change this, you can also select fields manually.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Selecting Fields Manually&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Operation(schema&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Query)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;issues &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;repository(owner&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;owner, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;issues(first&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# select number and title field&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;issues&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;number()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;issues&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# selection pagination data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;issues&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_info&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__fields__(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;has_next_page&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;issues&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_info&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__fields__(end_cursor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Making a Mutation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Calling mutations is just as easy. Below is a &lt;code&gt;login&lt;/code&gt; mutation example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Operation(schema&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Mutation)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mutation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login(input&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;: username, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;: password})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# select errors and user data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mutation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;errors()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mutation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;user()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# call the endpoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; endpoint(op)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;wrapping-it-up&#34;&gt;Wrapping It Up&lt;/h3&gt;
&lt;p&gt;For me SGQLC takes calling GraphQL queries in Python to a whole new level of ease and compactness. I highly recommend implementing it into your Python tool belt. However, other Python libraries like GQL and Python GraphQL Client are also great tools for a more standard approach.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Using Docker Compose for Development without Going Crazy</title>
      <link>/posts/2023-01-15-docker-compose-for-dev/</link>
      <pubDate>Sun, 15 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>/posts/2023-01-15-docker-compose-for-dev/</guid>
      <description>Docker Compose is a great tool for development but I&amp;rsquo;ve never found a good example of how to use it for an ideal development workflow. Containers are immutable and thus by default are not an ideal development environment because development is fundamentally about changing things and then running the change. Most Docker Compose blogs talk about mounting your code repository as a volume which gets you around the immutability problem and mapping a port, but they don&amp;rsquo;t go much past that.</description>
      <content>&lt;p&gt;Docker Compose is a great tool for development but I&amp;rsquo;ve never found a good example of how to use it for an ideal development workflow. Containers are immutable and thus by default are not an ideal development environment because development is fundamentally about changing things and then running the change. Most Docker Compose blogs talk about mounting your code repository as a volume which gets you around the immutability problem and mapping a port, but they don&amp;rsquo;t go much past that. There are many more little tricks you can do to make your development experience better. Here I gathered all the tricks I&amp;rsquo;ve used to make Docker Compose a great development workflow.&lt;/p&gt;
&lt;h2 id=&#34;create-a-development-container&#34;&gt;Create a Development Container&lt;/h2&gt;
&lt;p&gt;Your development container will probably diverge from your production and CI containers so you can handle having two diverging containers by either having a multi-staged build or having a separate Dockerfile for development. I normally fall into having a separate Dockerfile because your production and CI containers are often optimized for caching and being efficient to ship the container around. Trying to fit a development workflow into that can become clumsy and difficult to do cleanly. The downside is that you may duplicate some Dockerfile code between the two files. However, this should be small since the development container is often very few Dockerfile lines.&lt;/p&gt;
&lt;p&gt;If you do use the staged build approach, use the &lt;a href=&#34;https://docs.docker.com/compose/compose-file/compose-file-v3/#target&#34;&gt;target&lt;/a&gt; attribute in your Docker Compose file.&lt;/p&gt;
&lt;h2 id=&#34;sync-user-permissions&#34;&gt;Sync User Permissions&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s good practice to not run as root but also for your development container it&amp;rsquo;s nice to sync up the container user with your local user. This ensures your files mounted outside the container will have the correct permissions. To do this:&lt;/p&gt;
&lt;h3 id=&#34;1-add-some-build-args-to-your-dockerfile&#34;&gt;1. Add some build args to your Dockerfile&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ARG userid
ARG groupid
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-create-a-user-in-your-dockerfile-with-sudo-access&#34;&gt;2. Create a user in your Dockerfile with sudo access&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# User setup
RUN addgroup mygroup --gid $groupid
RUN useradd -ms /bin/bash -u $userid -g $groupid myuser
RUN echo &amp;#39;myuser ALL=(ALL) NOPASSWD:ALL&amp;#39; &amp;gt;&amp;gt; /etc/sudoers
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-when-building-pass-in-your-build-args&#34;&gt;3. When building, pass in your build args&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker-compose build --build-arg userid=$(id -u) --build-arg groupid=$(id -g)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;share-secrets&#34;&gt;Share Secrets&lt;/h2&gt;
&lt;p&gt;There is a &lt;code&gt;secrets&lt;/code&gt; attribute you can use in Docker Compose. However, since this is for development we don&amp;rsquo;t need to secure a production environment. I&amp;rsquo;ve found it easier to just mount some shared files and directories. Below is an example of some &amp;ldquo;secrets&amp;rdquo; I like to share.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;myapp&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;.:/opt/myapp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;$HOME/.git:/home/myuser/.git&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;$HOME/.ssh:/home/myuser/.ssh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;$HOME/.netrc:/home/myuser/.netrc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;$HOME/.pypirc:/home/myuser/.pypirc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;share-git-and-ssh&#34;&gt;Share Git and SSH&lt;/h2&gt;
&lt;p&gt;See above. If you share your &lt;code&gt;.git&lt;/code&gt; and &lt;code&gt;.ssh&lt;/code&gt; directories with your development container you can execute git commands in your container without needing to jump in and out. This makes your development workflow much more enjoyable with fewer terminals open or fewer keystrokes.&lt;/p&gt;
&lt;h2 id=&#34;install-some-development-tools&#34;&gt;Install Some Development Tools&lt;/h2&gt;
&lt;p&gt;Especially if you use a separate Dockerfile and thus don&amp;rsquo;t need to worry about the container size, install some extra development tools. Some apt packages I like to install: &lt;code&gt;procps, nano, vim, sudo, htop, tmux, redis-tools, autojump, openssh-client, wget, unzip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And one of my other favorite tools: &lt;a href=&#34;https://github.com/nvbn/thefuck&#34;&gt;thefuck&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;share-shell-environments&#34;&gt;Share Shell Environments&lt;/h2&gt;
&lt;p&gt;Since you have a development container you can now really easy make a shared development environment setup. I like to include a shared &lt;code&gt;.bashrc&lt;/code&gt; in my repository and then in the Dockerfile copy that to the user&amp;rsquo;s home directory.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;COPY .bashrc /home/myuser/&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;remember-your-command-history&#34;&gt;Remember Your Command History&lt;/h2&gt;
&lt;p&gt;Since containers are immutable, they will lose your command history on rebuild. You can solve this by linking in a &lt;code&gt;.bash_history&lt;/code&gt; file in your Dockerfile.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RUN ln -s /opt/myapp/.bash_history /home/myuser/.bash_history&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;full-setup&#34;&gt;Full Setup&lt;/h2&gt;
&lt;p&gt;Below is the full setup, &lt;code&gt;Dockerfile.dev&lt;/code&gt;, &lt;code&gt;compose.yaml&lt;/code&gt;, and &lt;code&gt;.gitignore&lt;/code&gt; additions.&lt;/p&gt;
&lt;h3 id=&#34;dockerfiledev&#34;&gt;Dockerfile.dev&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ubuntu:bionic&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ARG&lt;/span&gt; userid&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ARG&lt;/span&gt; groupid&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /build&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# apt layer&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt update&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt install -y python3.8 python3.8-venv libpython3.8&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# dev tools&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt install -y procps nano vim sudo htop tmux redis-tools autojump openssh-client wget unzip&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pip, pdm setup&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; python3.8 -m pip install pip --upgrade&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; pip3.8 install --upgrade pip&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; pip3.8 install pdm thefuck&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# User setup&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; addgroup mygroup --gid $groupid&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; useradd -ms /bin/bash -u $userid -g $groupid myuser&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myuser ALL=(ALL) NOPASSWD:ALL&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sudoers&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /opt/myapp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;USER&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; myuser&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; .bashrc /home/myuser/&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ln -s /opt/myapp/.bash_history /home/myuser/.bash_history&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;composeyaml&#34;&gt;compose.yaml&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3.9&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;myapp&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;network_mode&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;host&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;context&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;dockerfile&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Dockerfile.dev&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;command&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;DEV_CONTAINER=1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;PYTHONUNBUFFERED=1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;XDG_DATA_HOME=/opt/myapp/.local/share&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;.:/opt/myapp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;$HOME/.git:/home/myuser/.git&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;$HOME/.ssh:/home/myuser/.ssh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;$HOME/.netrc:/home/myuser/.netrc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;$HOME/.pypirc:/home/myuser/.pypirc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;8888&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8888&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;8081&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8081&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;shm_size&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4gb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;depends_on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;redis&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;redis&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bitnami/redis:latest&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;ALLOW_EMPTY_PASSWORD=yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gitignore-additions&#34;&gt;.gitignore additions&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.bash_history
.local
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Using WeatherKit with Python</title>
      <link>/posts/2022-08-09-weatherkit-python/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 -0600</pubDate>
      
      <guid>/posts/2022-08-09-weatherkit-python/</guid>
      <description>Apple bought out the Dark Sky weather company in 2020. They plan on shutting down the Darky Sky API and replacing it with the new WeatherKit service. The WeatherKit service is now in beta and can be used to retrieve weather forecasts and current conditions.
The Dark Sky API was extremely easy to use and provided excellent weather data. The WeatherKit API functions much the same as the Dark Sky API, however, the authorization is very different and some what more difficult.</description>
      <content>&lt;p&gt;Apple bought out the Dark Sky weather company in 2020. They plan on shutting down the Darky Sky API and replacing it with the new WeatherKit service. The WeatherKit service is now in beta and can be used to retrieve weather forecasts and current conditions.&lt;/p&gt;
&lt;p&gt;The Dark Sky API was extremely easy to use and provided excellent weather data. The WeatherKit API functions much the same as the Dark Sky API, however, the authorization is very different and some what more difficult. You still need to an API token like the previous API. However, now generating the token is more complex. Below is a gist that lays out how to use the API in Python with explanations of some aspects of the usage following.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/pizzapanther/8a29b5462c786f0bb94a257ea535cc0f.js&#34;&gt;&lt;/script&gt;
&lt;h2 id=&#34;items-needed-to-generate-a-token&#34;&gt;Items Needed to Generate a Token&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;WEATHERKIT_SERVICE_ID:&lt;/strong&gt; &lt;a href=&#34;https://developer.apple.com/account/resources/identifiers/list/serviceId&#34;&gt;Create a service&lt;/a&gt; in your Apple developer account. It should look something like &lt;code&gt;com.example.weatherkit-client&lt;/code&gt; and make sure it ends in &lt;code&gt;.weatherkit-client&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WEATHERKIT_TEAM_ID:&lt;/strong&gt; Go to your &lt;a href=&#34;https://developer.apple.com/account/&#34;&gt;developer account&lt;/a&gt; and get your Team ID.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WEATHERKIT_KID and WEATHERKIT_KEY:&lt;/strong&gt; &lt;a href=&#34;https://developer.apple.com/account/resources/authkeys/list&#34;&gt;Generate a new key&lt;/a&gt; and get the Key ID and contents of the p8 file.&lt;/p&gt;
&lt;h2 id=&#34;generate-a-jwt&#34;&gt;Generate a JWT&lt;/h2&gt;
&lt;p&gt;Once you have the required items, you can use them to generate a JSON Web Token using the &lt;code&gt;ES256&lt;/code&gt; algorithm. The expiration used to generate the token can be a large amount of time, however, a short expiration is better in case your token ever got compromised.&lt;/p&gt;
&lt;h2 id=&#34;using-your-token&#34;&gt;Using Your Token&lt;/h2&gt;
&lt;p&gt;Once you have a token generated, use it in an authorization header to make requests. The token can be reused until the token expiration has passed.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Live Streaming Setup for Small/Medium Churches</title>
      <link>/posts/2021-12-28-streaming-setup/</link>
      <pubDate>Tue, 28 Dec 2021 20:00:00 -0600</pubDate>
      
      <guid>/posts/2021-12-28-streaming-setup/</guid>
      <description>With the pandemic live streaming services has become the default for church services. For smaller churches they may think that this tech may be out of reach because of things like cost and expertise. Thus, I&amp;rsquo;ve tried to come up with a cost effective way of live streaming that is easier to maintain. This blog post documents the streaming setup I&amp;rsquo;ve used at Church in the Wildwood.
Rule 1: Do the Audio Well The first thing you want to do well is your audio.</description>
      <content>&lt;p&gt;With the pandemic live streaming services has become the default for church services. For smaller churches they may think that this tech may be out of reach because of things like cost and expertise. Thus, I&amp;rsquo;ve tried to come up with a cost effective way of live streaming that is easier to maintain. This blog post documents the streaming setup I&amp;rsquo;ve used at &lt;a href=&#34;https://www.wildwoodag.church/&#34;&gt;Church in the Wildwood&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;rule-1-do-the-audio-well&#34;&gt;Rule 1: Do the Audio Well&lt;/h2&gt;
&lt;p&gt;The first thing you want to do well is your audio. You can cover many of video sins if you have good audio. People will dismiss a lot of bad video if the audio is good. Also in this distracted age, many people will only be listening to the audio and not paying attention to the video while they do other things.&lt;/p&gt;
&lt;p&gt;The easiest way to do audio is to use the mic in your phone or camera and directly stream from that device. However, this often produces bad audio unless you can come up with a better more expensive mic setup. However, most churches will already have monitors setup, so you can use an additional monitor output on your mixer board to capture the audio for your live stream. Additionally, this allows you to mix the audio before going into your live stream. Your streaming audio will require different levels than your house mix. This allows you to create a great sounding mix just for your stream. The hard part will be monitoring you levels for both your house and your stream. For music, this can be tricky, however, for preaching you can often set your levels and only check in occasionally because often times streaming software will adjust volume automatically.&lt;/p&gt;
&lt;h2 id=&#34;streaming-software&#34;&gt;Streaming Software&lt;/h2&gt;
&lt;p&gt;With the explosion of Youtube and personal broadcasting there are now many ways to live stream easily. To keep things easy, I recommend software like &lt;a href=&#34;https://streamyard.com/&#34;&gt;Stream Yard&lt;/a&gt;. Stream Yard and Restream let you broadcast directly from most web browsers. This means just about any computer you have can be turned into your new streaming rig. Additionally, you can add more cameras to your stream by joining your broadcast with any video capable device. Lastly, whenever you broadcast you get built in recording to the cloud. So often, even if I&amp;rsquo;m not broadcasting, I start a stream for recording only.&lt;/p&gt;
&lt;p&gt;I like keeping a separate computer for streaming, however, if you have a powerful enough computer and you want to keep costs down you could run this software on your presentation computer. Additionally, if you don&amp;rsquo;t have a &amp;ldquo;line in&amp;rdquo; on your sound card for your computer, you can purchase pretty cheap USB sound cards that will give you this capability. Finally, a nice touch is to always make sure your presentation computer is added to the live stream so you can share slides and videos being shown.&lt;/p&gt;
&lt;p&gt;Last thing to note when setting up your live stream audio, since you are going through your sound mixer, you should turn off any &amp;ldquo;echo cancellation&amp;rdquo; in your streaming software. Often with this setup, it no longer does anything, but additionally, you will get better quality sound with this off. Many times I still keep on &amp;ldquo;automatic volume adjustment&amp;rdquo; so I don&amp;rsquo;t have to monitor the stream levels so much. However, if you can monitor your stream audio and turn that off as well, you can bump up your quality a bit too.&lt;/p&gt;
&lt;h2 id=&#34;viewing-the-broadcast&#34;&gt;Viewing the Broadcast&lt;/h2&gt;
&lt;p&gt;You have many options to where you would like to send your broadcast and most of them are free. I personally like to add &lt;a href=&#34;https://online.church/&#34;&gt;Online.Church&lt;/a&gt; on top of whatever platform I&amp;rsquo;m using to broadcast. This gives the church a way to switch out broadcast providers if anything ever happens or changes. It also gives you a way to &amp;ldquo;own&amp;rdquo; the relationship with your viewers more instead of relying on third parties like Youtube and Facebook who can often block access to your viewers.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Android Privacy Protocol</title>
      <link>/posts/2021-07-06-android-privacy-protocol/</link>
      <pubDate>Tue, 06 Jul 2021 20:00:00 -0600</pubDate>
      
      <guid>/posts/2021-07-06-android-privacy-protocol/</guid>
      <description>Recently I&amp;rsquo;ve had the goal to reduce my usage of big tech products and thus reduce the tracking and influence they have in my life. One of the biggest areas to reduce is the phone. Modern Android has all kinds of hooks so that apps and Google services can track you. And it is almost impossible for you to turn off these services and still have the ability to use everyday applications.</description>
      <content>&lt;p&gt;Recently I&amp;rsquo;ve had the goal to reduce my usage of big tech products and thus reduce the tracking and influence they have in my life. One of the biggest areas to reduce is the phone. Modern Android has all kinds of hooks so that apps and Google services can track you. And it is almost impossible for you to turn off these services and still have the ability to use everyday applications.&lt;/p&gt;
&lt;p&gt;My first attempt to reduce tracking was to try operating systems such as &lt;a href=&#34;https://calyxos.org/&#34;&gt;CalyxOS&lt;/a&gt; and &lt;a href=&#34;https://grapheneos.org/&#34;&gt;GrapheneOS&lt;/a&gt;. These operating systems do a great job of removing Google services, but the trade-off is that you can use fewer applications because many depend on these services.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://calyxos.org/&#34;&gt;CalyxOS&lt;/a&gt; comes built-in with &lt;a href=&#34;https://microg.org/&#34;&gt;MicroG&lt;/a&gt; which attempts to fill in for these services, however, there are still some apps that do not function well with a Google substitute. Through the usage of these OS&amp;rsquo;s though, I have been able to come up with a privacy protocol to use with a normal Android phone to increase privacy while still maintaining application compatibility.&lt;/p&gt;
&lt;h2 id=&#34;android-privacy-protocol&#34;&gt;Android Privacy Protocol&lt;/h2&gt;
&lt;p&gt;The Android Privacy Protocol is a set of methods to configure and use your Android phone to increase your privacy with any standard Android phone while also having the ability to use most modern apps.&lt;/p&gt;
&lt;p&gt;A general overview of the protocol:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep the default profile anonymous (don&amp;rsquo;t log into a Google account)&lt;/li&gt;
&lt;li&gt;Use the &lt;a href=&#34;https://auroraoss.com/&#34;&gt;Aurora Store&lt;/a&gt; to install applications&lt;/li&gt;
&lt;li&gt;Use a &amp;ldquo;Work&amp;rdquo; profile for any Google or other apps you wish to contain and restrict usage&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-the-protocol-works&#34;&gt;How the Protocol Works&lt;/h2&gt;
&lt;p&gt;Android has long given you the ability to not log into your Google account and thus function anonymously;
however, when you do this, you lose the ability to install applications from the Play Store. You will still receive updates of existing installed apps. To get around this, we use the third-party Play Store app, the &lt;a href=&#34;https://auroraoss.com/&#34;&gt;Aurora Store&lt;/a&gt;. This allows you to download apps from the Play Store without using the Play Store. And thus, you can now use most apps without logging in with a Google account.&lt;/p&gt;
&lt;p&gt;The last part of the protocol is to use a &amp;ldquo;work&amp;rdquo; profile for applications that you need a Google account for. Android allows you to have multiple users/profiles, however, by default you have to log out of one profile and switch to another. This is useful but can be cumbersome if you use it daily. We can do better! Android also includes a feature that allows you to use a &amp;ldquo;work&amp;rdquo; profile side by side with your personal apps. However, this feature is not accessible and usually only available to enterprise devices. What is interesting though is this feature is available to modern Android users if you have an app that will turn it on for you. The &lt;a href=&#34;https://play.google.com/store/apps/details?id=net.typeblog.shelter&amp;hl=en_US&amp;gl=US&#34;&gt;Shelter app&lt;/a&gt; lets you access this feature even though it might be hidden. In addition to application isolation, the Shelter app lets you shut down all your &amp;ldquo;work apps&amp;rdquo; at once. So you can use your favorite apps, shut them down quickly and isolate their data access to curtail some of their trackings.&lt;/p&gt;
&lt;h2 id=&#34;the-setup&#34;&gt;The Setup&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s go over the details of how to set up your phone with the Android Privacy Protocol.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Starting with a new phone, go through the Android setup but make sure to skip Google account setup and restoring from another account or phone. You can still use things like fingerprint unlock but make sure not to connect a Google account.&lt;/li&gt;
&lt;li&gt;Let the Play Store apply the latest updates.&lt;/li&gt;
&lt;li&gt;Install the &lt;a href=&#34;https://auroraoss.com/&#34;&gt;Aurora Store&lt;/a&gt;. You can feel free to log into Google here if you wish to have access to your paid apps. The Aurora Store does not connect the Google account outside the app.&lt;/li&gt;
&lt;li&gt;Install the &lt;a href=&#34;https://play.google.com/store/apps/details?id=net.typeblog.shelter&amp;hl=en_US&amp;gl=US&#34;&gt;Shelter app&lt;/a&gt; from the &lt;a href=&#34;https://auroraoss.com/&#34;&gt;Aurora Store&lt;/a&gt; and setup your &amp;ldquo;work profile&amp;rdquo;. This is where you can log into your Google account if you wish to keep it isolated. Note: if you have trouble installing Aurora or the Shelter App it might be easier to install &lt;a href=&#34;https://f-droid.org/&#34;&gt;F-Droid&lt;/a&gt; first, then install those apps from there.&lt;/li&gt;
&lt;li&gt;Continued usage: Install personal apps from the Aurora Store and work apps from the Play Store (under your work profile).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: If you have trouble finding applications on the &lt;a href=&#34;https://auroraoss.com/&#34;&gt;Aurora Store&lt;/a&gt; then use the Play Store under your work profile. Using the Shelter app, you can then clone the app to your personal profile. Lastly, if you wish, you can remove the app from your work profile.&lt;/p&gt;
&lt;h2 id=&#34;final-words&#34;&gt;Final Words&lt;/h2&gt;
&lt;p&gt;I still have to do some research on how private using Android mostly anonymously is, but in theory, I think it is a huge gain. I think this method is a good way to stay private while also having access to the widest variety of apps.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Leaking as a Feature</title>
      <link>/posts/2021-05-10-leaking-as-a-feature/</link>
      <pubDate>Mon, 10 May 2021 20:00:00 -0600</pubDate>
      
      <guid>/posts/2021-05-10-leaking-as-a-feature/</guid>
      <description>A while ago I decided to take the plunge and build my own bike. I went with a titanium frame and electronic gear shifting. Really amazing stuff! I&amp;rsquo;ve been tweaking things as I go along trying to both improve my speed but also make a more comfortable ride. Of all the things I&amp;rsquo;ve tried, even from going to a lighter frame and better gearing, the biggest bang for my buck in terms of speed has been changing tires.</description>
      <content>&lt;p&gt;A while ago I decided to take the plunge and build my own bike. I went with a titanium frame and electronic gear shifting. Really amazing stuff! I&amp;rsquo;ve been tweaking things as I go along trying to both improve my speed but also make a more comfortable ride. Of all the things I&amp;rsquo;ve tried, even from going to a lighter frame and better gearing, the biggest bang for my buck in terms of speed has been changing tires. This is my journey of trying out different tire types.&lt;/p&gt;
&lt;img alt=&#34;road panther&#34; src=&#34;/biking/road-panther.jpeg&#34; style=&#34;display: block; margin: 0 auto; width: 500px;&#34;&gt;
&lt;h2 id=&#34;norm-core-tires&#34;&gt;Norm Core Tires&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve been riding bikes like most people since I&amp;rsquo;ve been a kid and so I figured everyone just uses tube tires. This was fine and I pretty much knew how to change a tire since I&amp;rsquo;ve been young. However, because I&amp;rsquo;m a heavier guy, I learned about pinch flats fast and other roads objects piercing my tubes. When I built my new bike I decided to go with larger tires and thorn resistant tubes.&lt;/p&gt;
&lt;p&gt;Thorn resistant tubes were great and definitely cut down on the number of flats I had but when moving out to a more rural area I started running into more road debris. I also started to encounter sub-par tubes that would pop at the seams or valve stem. With the combination of both these factors I started to get really annoyed with changing tubes.&lt;/p&gt;
&lt;img alt=&#34;Tannus Tire&#34; src=&#34;/biking/tannus.jpeg&#34; style=&#34;display: block; margin: 0 auto;&#34;&gt;
&lt;h2 id=&#34;solid-tires&#34;&gt;Solid Tires&lt;/h2&gt;
&lt;p&gt;I started looking for solutions to all the punctures I was having. I kept hearing about Tannus Armour Inserts which put a protective layer between your tire and the tube. This sounded great, however, because of the debris I ran over was really awful, I knew the insert wouldn&amp;rsquo;t protect me from everything.
While exploring Tannus I found they have an airless tire that would eliminate all worries of ever having a puncture. I read and watched various reviews of the tire and found a wide range of emotions from hatred to love of the tires. The love usually centered around the thought of never having to change a flat again, and the hate usually centered around the extra rolling resistance the tires generate.&lt;/p&gt;
&lt;p&gt;Since I&amp;rsquo;m a larger biker, I didn&amp;rsquo;t want to lose too much speed but also I&amp;rsquo;m not overly concerned about it. Also most of the reviews focused on the early versions of Tannus tires and not the newer versions which offer better rolling resistance. The older tires were often stated to have 8% more rolling resistance while with some of the newer versions they often state you won&amp;rsquo;t notice the difference. This led me to look up my tubed tires to see what rolling resistance they had. I found the site &lt;a href=&#34;https://www.bicyclerollingresistance.com/&#34;&gt;bicyclerollingresistance.com&lt;/a&gt; and quickly learned the tube tires I was using were pretty awful. So what would it hurt to get a little more resistance? I decided to go with the Tannus Portal tire because it seemed the fastest tire for my wheel size.&lt;/p&gt;
&lt;h2 id=&#34;solid-tires-review&#34;&gt;Solid Tires Review&lt;/h2&gt;
&lt;p&gt;First off I installed the solid tires myself. And while the whole process was pretty awful and time consuming, at least you only have to do it once. So this was fine to me. However, once you get the solid tires on, they aren&amp;rsquo;t coming off with out destroying them. You have to be all in on these tires! But I was, so again not a big deal. For some people this may be a huge show stopper.&lt;/p&gt;
&lt;p&gt;It takes some time to break in the solid tires and I could definitely feel the difference once they loosened up. The overall ride quality was really surprisingly good. It&amp;rsquo;s not like you can immediately notice your riding on solid tires. However, vibrations from the road definitely translate more into the bike. So while I couldn&amp;rsquo;t notice much difference at any given time, over a long ride my butt would definitely be more sore on solid tires. After breaking in the tires and tracking a few rides, I was definitely about 1 mph slower. However, as I extended my rides to locations where roads were smoother I noticed on those portions of the ride while I was not breaking my previous records, I was matching my previous ride speeds.&lt;/p&gt;
&lt;p&gt;Overall, I loved the freedom that the solid tires provided and depending on the roads you ride on, you might not notice too much of a change. If I was a commuter and riding on smooth city streets I think these tires would be my tire of choice. However, I was training for a triathlon and wanted something faster for the race.&lt;/p&gt;
&lt;img alt=&#34;tubeless tire&#34; src=&#34;/biking/tubeless.jpeg&#34; style=&#34;display: block; margin: 0 auto; width: 600px;&#34;&gt;
&lt;h2 id=&#34;tubeless-tires&#34;&gt;Tubeless Tires&lt;/h2&gt;
&lt;p&gt;During my research on solid tires, I also ran into tubeless tires. Tubeless while being easier to puncture, use a self healing goop that seals up holes and leaks. They definitely don&amp;rsquo;t hold air as good as tube tires but anything that leaks is immediately filled with the self healing slime. And the rolling resistance of these tires is amazing. I decided I wanted to try these also but not throw out my solid tires. So I decided to have two sets of wheels, one for solid and one for tubeless. I opted for Continental tires again but this time the tubeless version offered closer to best in class rolling resistance compared to near the bottom of performance on the tube version.&lt;/p&gt;
&lt;p&gt;The tubeless install was also difficult but not near as bad as the solid tire. And right off the bat with my first ride I was immediately 2 mph faster than anything I had ever done. I think part of the reason for the extra speed was because I had just gotten good resistance training from the solid tires, but for sure the lesser rolling resistance was contributing to the extra performance.  And out of any change I ever made to the bike, this was probably the largest gain I had made by changing one thing.&lt;/p&gt;
&lt;p&gt;After a while on the tubeless, I had a flat pretty fast. It was a side puncture that seemed odd so maybe it was a defect in the tire. However, I came to the conclusion that I was always having flats on the rear tire probably due to the extra weight. So I decided to keep the fast front tire and switch my back tire to a Pirelli Cinturato Velo tubeless. This tire had extremely more protection and was still relatively fast compared to tube tires. Also I switched to Muck Off Sealant which seems to much better than the previous sealant I used. With this combination I haven&amp;rsquo;t had any flats so far on the tubeless tires.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Voice Assistants are the Modern Day Groom of the Stool</title>
      <link>/posts/2019-08-02-modern-day-groom-of-the-stool/</link>
      <pubDate>Fri, 02 Aug 2019 20:00:00 -0600</pubDate>
      
      <guid>/posts/2019-08-02-modern-day-groom-of-the-stool/</guid>
      <description>All the rage in the news lately has been the revelation that voice assistants are listening and recording many of our conversations and employees and contractors of these companies can access these recordings. And while accessing these recordings can be anonymous, happens to legitimately improve the service, and happens to a very low percentage of recordings, it still makes the most logical of us flinch. Why is that?
The 1st Earl of Holland, Groom of the Stool to Charles I, until 1643 Here is a sample of some of the latest stories:</description>
      <content>&lt;p&gt;All the rage in the news lately has been the revelation that voice assistants are listening and recording many of our conversations and employees and contractors of these companies can access these recordings. And while accessing these recordings can be anonymous, happens to legitimately improve the service, and happens to a very low percentage of recordings, it still makes the most logical of us flinch. Why is that?&lt;/p&gt;
&lt;img class=&#34;img-center&#34; alt=&#34;The 1st Earl of Holland, Groom of the Stool to Charles I, until 1643&#34; src=&#34;/img/groom.jpg&#34;&gt;
&lt;div class=&#34;text-center&#34;&gt;
  &lt;em&gt;The 1st Earl of Holland, Groom of the Stool to Charles I, until 1643&lt;/em&gt;
  &lt;br&gt;&lt;br&gt;
&lt;/div&gt;
&lt;p&gt;Here is a sample of some of the latest stories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.theverge.com/2019/8/1/20750327/google-assistant-voice-recording-investigation-europe?ref=hackernoon.com&#34;&gt;Google will pause listening to EU voice recordings while regulators investigate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.newsweek.com/amazon-alexa-recordings-romania-sex-privacy-1452173?ref=hackernoon.com&#34;&gt;Amazon Alexa Capture Audio of People Having Sex, Possible Sexual Assaults: Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.theguardian.com/technology/2019/aug/02/apple-halts-practice-of-contractors-listening-in-to-users-on-siri?ref=hackernoon.com&#34;&gt;Apple halts practice of contractors listening in to users on Siri&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The thing I came to realize is that voice assistants are like butlers or more interestingly like Grooms of the Stool. What are Grooms of the Stool? Check out &lt;a href=&#34;https://en.wikipedia.org/wiki/Groom_of_the_Stool&#34;&gt;Wikipedia&lt;/a&gt; for more detailed info. In a nutshell, they helped the king with his toileting needs. That could include bringing the king water or towels, maybe even helping him wash his butt. The groom would even interface with the royal doctor to supply the doctor with information about the king&amp;rsquo;s bowel movements and diet.&lt;/p&gt;
&lt;p&gt;The thing is this position was so intimate that this position became one of high trust, confidence, and power. The Groom of the Stool often knew state and personal secrets. Eventually the position evolved into an administration of royal finances and under Henry VII was given the responsibility of setting national fiscal policy.&lt;/p&gt;
&lt;p&gt;Google, Alexa, and Siri right now are fairly simple in terms of what they can do. They provide some convenient services but it is at the cost of being very intimate with us. They definitely can take some drudgery out of the everyday. With this, they not only listen in but also gather many points of data on us.&lt;/p&gt;
&lt;p&gt;My point of all this is not to scare you. After all, I&amp;rsquo;m sure many Grooms of the Stool were very well liked and highly valued. But if you wish for tech companies to take care of your private areas, you better trust them a lot. And for tech companies, you better not lose our trust, or you might get beheaded pretty quick. I think we are seeing this already for calls to break up tech companies like Facebook and Amazon.&lt;/p&gt;
&lt;p&gt;Lastly, to keep some separation of powers maybe don&amp;rsquo;t let the Groom of the Stool also control your finances. I&amp;rsquo;m thinking this could be Apple and their new &lt;a href=&#34;https://www.theverge.com/2019/7/30/20747618/apple-confirms-apple-card-august-launch&#34;&gt;Apple credit card&lt;/a&gt; and &lt;a href=&#34;https://www.theverge.com/2019/7/30/20747618/apple-confirms-apple-card-august-launch&#34;&gt;Facebook and their Libra coin&lt;/a&gt;. However, Amazon is probably already pretty close to this power if you shop on Amazon and use Alexa.&lt;/p&gt;
&lt;p&gt;In conclusion, keep your friends close and your enemies closer, and don&amp;rsquo;t let tech companies wipe your butt unless they are highly trusted.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href=&#34;https://en.wikipedia.org/wiki/Groom_of_the_Stool&#34;&gt;Groom of the Stool, Wikipedia&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Contact</title>
      <link>/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contact/</guid>
      <description>Contact us via E-Mail Twitter Catch us on Twitter @pizzapanther</description>
      <content>&lt;h3 id=&#34;contact-us-via-e-mailmailtoinquiryneutronstudio&#34;&gt;Contact us via &lt;a href=&#34;mailto:inquiry@neutron.studio&#34;&gt;E-Mail&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;twitter&#34;&gt;Twitter&lt;/h3&gt;
&lt;p&gt;Catch us on &lt;a href=&#34;https://twitter.com/pizzapanther&#34;&gt;Twitter @pizzapanther&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Demo Page</title>
      <link>/demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/demo/</guid>
      <description>Demo Page narf</description>
      <content>&lt;h2 id=&#34;demo-page&#34;&gt;Demo Page&lt;/h2&gt;
&lt;p&gt;narf&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
